// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaskAppTests.BDD
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("User stories2 Create SubTask")]
    [NUnit.Framework.CategoryAttribute("createSubTask")]
    public partial class UserStories2CreateSubTaskFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Us_2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "User stories2 Create SubTask", "  As a ToDo App user\r\n  I should be able to create a subtask\r\n  So I can break do" +
                    "wn my tasks in smaller pieces", ProgrammingLanguage.CSharp, new string[] {
                        "createSubTask"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07 User should see a button labeled as \'Manage Substasks\'")]
        public virtual void _07UserShouldSeeAButtonLabeledAsManageSubstasks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 User should see a button labeled as \'Manage Substasks\'", ((string[])(null)));
#line 8
  this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
    testRunner.Then("user should see a button labeled as Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08 Manage Subtasks popup should have the number of subtasks created for that task" +
            "s")]
        public virtual void _08ManageSubtasksPopupShouldHaveTheNumberOfSubtasksCreatedForThatTasks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08 Manage Subtasks popup should have the number of subtasks created for that task" +
                    "s", ((string[])(null)));
#line 13
   this.ScenarioSetup(scenarioInfo);
#line 14
    testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
    testRunner.Then("user should see a button labeled as Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("the number of subtasks created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09 only field of description and id")]
        public virtual void _09OnlyFieldOfDescriptionAndId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09 only field of description and id", ((string[])(null)));
#line 20
 this.ScenarioSetup(scenarioInfo);
#line 21
    testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("click on the button Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("a popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("shoud have only field with the task ID and the task description", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10 Should be a form with the SubTask Description and due date")]
        public virtual void _10ShouldBeAFormWithTheSubTaskDescriptionAndDueDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10 Should be a form with the SubTask Description and due date", ((string[])(null)));
#line 28
    this.ScenarioSetup(scenarioInfo);
#line 29
     testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
  testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
  testRunner.And("click on the button Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
  testRunner.Then("a popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
     testRunner.And("shoud have the subTask field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
     testRunner.And("should have a due date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11 The due date field should have MM/dd/yyyy format")]
        [NUnit.Framework.TestCaseAttribute("subtask invalid format 1", "02/08/2017", null)]
        [NUnit.Framework.TestCaseAttribute("subtask invalid format 2", "2017/08/02", null)]
        [NUnit.Framework.TestCaseAttribute("subtask invalid format 3", "02/08/17", null)]
        [NUnit.Framework.TestCaseAttribute("subtask invalid format 4", "august/02/2017", null)]
        public virtual void _11TheDueDateFieldShouldHaveMMDdYyyyFormat(string subtasksName, string dueDateFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11 The due date field should have MM/dd/yyyy format", exampleTags);
#line 37
 this.ScenarioSetup(scenarioInfo);
#line 38
       testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
    testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
    testRunner.And("click on the button Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
    testRunner.Then("a popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
       testRunner.And(string.Format("write the subTask \"{0}\"", subtasksName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
       testRunner.And(string.Format("write the due date \"{0}\"", dueDateFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
       testRunner.And("click in Add Subtask", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
    testRunner.Then("subtask can not be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
    testRunner.And("close popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12 Due date field is rquired")]
        public virtual void _12DueDateFieldIsRquired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12 Due date field is rquired", ((string[])(null)));
#line 55
    this.ScenarioSetup(scenarioInfo);
#line 56
        testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
     testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
     testRunner.And("click on the button Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
     testRunner.Then("a popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
        testRunner.And("write the subTask name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
        testRunner.And("write the due date empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
        testRunner.And("click in Add Subtask", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
  testRunner.Then("subtask can not be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.And("close popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13 Description field is rquired")]
        public virtual void _13DescriptionFieldIsRquired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13 Description field is rquired", ((string[])(null)));
#line 66
     this.ScenarioSetup(scenarioInfo);
#line 67
        testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
     testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
     testRunner.And("click on the button Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
     testRunner.Then("a popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
        testRunner.And("write the subTask name empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
        testRunner.And("write the due date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
        testRunner.And("click in Add Subtask", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
        testRunner.Then("subtask can not be created with empty description", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
  testRunner.And("close popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14 Subtasks that were addeed should be appended on the bottom part of the modal d" +
            "ialog")]
        public virtual void _14SubtasksThatWereAddeedShouldBeAppendedOnTheBottomPartOfTheModalDialog()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14 Subtasks that were addeed should be appended on the bottom part of the modal d" +
                    "ialog", ((string[])(null)));
#line 77
    this.ScenarioSetup(scenarioInfo);
#line 78
        testRunner.Given("the user do the loggin in ToDo app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
     testRunner.And("create a new task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
     testRunner.And("click on the button Manage Subtasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
     testRunner.Then("a popup is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
        testRunner.And("write the subTask name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
        testRunner.And("write the due date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
        testRunner.And("click in Add Subtask", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
        testRunner.Then("Subtasks that were addeed should be appended on the bottom part of the modal dial" +
                    "og", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
  testRunner.And("close popup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
